import * as core from '@actions/core';
import * as exec from '@actions/exec';
import * as path from 'path';
import { RegistryFactory } from './registries/RegistryFactory.js';
export class DockerManager {
    registry;
    constructor(registryType) {
        this.registry = RegistryFactory.createRegistry(registryType);
    }
    qualifyImageName(image) {
        return this.registry.qualifyImageName(image);
    }
    async login(showFullOutput = false) {
        core.info('Logging into the registry...');
        await this.registry.login(showFullOutput);
    }
    async buildDocker(dockerfile, buildContext, version, image) {
        const qualifiedImage = this.registry.qualifyImageName(image);
        const imageWithVersion = `${qualifiedImage}:${version}`;
        core.info(`Building image ${imageWithVersion} from Dockerfile: ${dockerfile}`);
        await exec.exec('docker', ['build', '-f', dockerfile, '-t', imageWithVersion, buildContext], { silent: false });
        return imageWithVersion;
    }
    async pushDocker(imageWithVersion, pushWithLatest) {
        core.info(`Pushing ${imageWithVersion}...`);
        await exec.exec('docker', ['push', imageWithVersion], { silent: false });
        if (pushWithLatest) {
            const imageLatest = `${imageWithVersion.split(':')[0]}:latest`;
            core.info(`Tagging ${imageWithVersion} as ${imageLatest}`);
            await exec.exec('docker', ['tag', imageWithVersion, imageLatest], {});
            core.info(`Pushing ${imageLatest}...`);
            await exec.exec('docker', ['push', imageLatest], { silent: false });
        }
    }
    async buildCompose(dockerComposeFile) {
        core.info(`Building using Docker Compose file: ${dockerComposeFile}`);
        await exec.exec('docker-compose', ['-f', dockerComposeFile, 'build'], {});
    }
    async pushCompose(version, images, pushWithVersion, pushWithLatest) {
        if (pushWithVersion) {
            core.info(`Pushing images (version tag "${version}")...`);
            for (const image of images) {
                const qualifiedImage = this.registry.qualifyImageName(image);
                const imageWithVersion = `${qualifiedImage}:${version}`;
                await exec.exec('docker', ['push', imageWithVersion], {});
            }
        }
        if (pushWithLatest) {
            for (const image of images) {
                const qualifiedImage = this.registry.qualifyImageName(image);
                const imageWithVersion = `${qualifiedImage}:${version}`;
                const imageLatest = `${qualifiedImage}:latest`;
                core.info(`Tagging ${imageWithVersion} as ${imageLatest}`);
                await exec.exec('docker', ['tag', imageWithVersion, imageLatest], {});
                await exec.exec('docker', ['push', imageLatest], {});
            }
        }
    }
    // async dockerizeProject(
    //   projectPath: string,
    //   imageName: string,
    //   port: string,
    //   baseImage: string
    // ): Promise<void> {
    //   core.info(`Initializing Docker for the .NET project at: ${projectPath}`)
    //   await exec.exec(
    //     'docker',
    //     [
    //       'init',
    //       '--project-directory',
    //       projectPath,
    //       '--image-name',
    //       imageName,
    //       '--port',
    //       port,
    //       '--base-image',
    //       baseImage
    //     ],
    //     { silent: false }
    //   )
    //   core.info('Docker initialization completed.')
    // }
    async dockerizeProject(projectPath, // e.g. './src/MyApp'
    imageName, // e.g. 'myorg/myapp:1.0'
    port, // e.g. '5000'
    baseImage // e.g. 'mcr.microsoft.com/dotnet/aspnet:8.0'
    ) {
        core.info(`üî® Docker‚Äëinit (non‚Äëinteractive) at: ${projectPath}`);
        // 1. Prepare the ‚Äúanswers‚Äù for each prompt in order:
        //    ‚Ä¢ Platform ‚Üí ASP.NET Core
        //    ‚Ä¢ Project name ‚Üí folder name (e.g. MyApp)
        //    ‚Ä¢ .NET version ‚Üí (hard‚Äëcoded here; change as needed)
        //    ‚Ä¢ Port ‚Üí your port
        const projectName = path.basename(projectPath);
        const answers = ['ASP.NET Core', projectName, '8.0', port].join('\n');
        // 2. Pipe answers into `docker init`
        await exec.exec('bash', [
            '-c',
            // echo the answers | docker init in the project folder
            `echo "${answers}" | docker init`
        ], { cwd: projectPath });
        core.info(`‚úèÔ∏è  Patching Dockerfile to use base image: ${baseImage}`);
        // 3. Replace the autogenerated FROM line with your baseImage
        await exec.exec('bash', ['-c', `sed -i 's|^FROM .*|FROM ${baseImage}|' Dockerfile`], { cwd: projectPath });
        core.info(`üê≥ Building Docker image: ${imageName}`);
        // 4. Finally, build the image
        await exec.exec('docker', ['build', '-t', imageName, projectPath], {});
        core.info('‚úÖ Docker image built successfully.');
    }
}
